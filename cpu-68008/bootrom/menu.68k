;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Main menu of the bootloader. This is called immediately after the machine has
; started up.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Enters the loader main menu.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
Menu_Entry:
  ; we need interrupts on
  move    #$2200, sr

  ; set the on-board LEDs (OP3 = STATUS0 and OP7 = STATUS1)
  move.b  #%00001000, (Loader_68681Out)
  bsr.w   MC68681_UpdateOutput

.MainLoop:
  ; print message
  lea     Menu_Text(pc), a0
  bsr     lib_strlen

  swap    d0
  move.w  #0, d0

  lea     Menu_Text(pc), a0
  bsr     MC68681_UartTx

  ; attempt to receive response
  bsr     MC68681_UartRxChar
  swap    d0
  tst.w   d0
  beq     .CheckResponse

  ; there was an error
  ; todo: handle it
  bra     .MainLoop

.CheckResponse:
  ; we need to get the character into the low word again
  swap    d0

  ; start ROM app?
  cmp.b   #'1', d0
  bne     .CheckRAMApp

  ; start app in ROM at $008000
  lea     ROM_App_Base, a0
  bsr     Loader_RunApp

  ; if we get here, d0 will contain an error code
  lea     Menu_ErrRunApp(pc), a0
  bsr     Menu_PrintError
  bra     .MainLoop



.CheckRAMApp:
  cmp.b   #'2', d0
  bne     .CheckDownload

  ; start app in RAM at $088000
  lea     $088000, a0
  bsr     Loader_RunApp

  ; if we get here, d0 will contain an error code
  lea     Menu_ErrRunApp(pc), a0
  bsr     Menu_PrintError
  bra     .MainLoop



.CheckDownload:
  cmp.b   #'3', d0
  bne     .CheckMonitor

  ; enter download subroutine
  bsr     UartLoader_Start
  bra     .MainLoop



.CheckMonitor:
  cmp.b   #'4', d0
  bne     .InvalidOption

  ; enter monitor
  ; XXX: todo
  lea     Menu_ErrRunApp(pc), a0
  bsr     Menu_PrintError
  
  bra     .MainLoop



.InvalidOption:
  ; there was an invalid selection
  lea     Menu_Invalid(pc), a0
  bsr     lib_strlen

  swap    d0
  move.w  #0, d0

  lea     Menu_Invalid(pc), a0
  bsr     MC68681_UartTx

  ; repeat main loop
  bra     .MainLoop



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Prints an error code (in d0) with the description string in a0, similar to
; perror().
;
; INPUTS:
;   d0: error code
;   a0: description string (zero terminated)
; OUTPUTS:
;   None
; CLOBBERS:
;   d0-d2, a0-a1
;
Menu_PrintError:
  ; save the error code for later
  move.l  d0, -(sp)

  ; first, print the description string
  move.l  a0, a1
  bsr     lib_strlen

  swap    d0
  move.w  #0, d0

  move.l  a1, a0
  bsr     MC68681_UartTx

  ; print a colon
  moveq   #2, d0
  swap    d0
  lea     .Colon(pc), a0
  bsr     MC68681_UartTx

  ; now, get the error code and print it in hex
  move.l  (sp)+, d0
  lea     (Loader_Uart_Rx_Buffer), a0
  bsr     lib_dectohex

  moveq   #8, d0
  swap    d0
  lea     (Loader_Uart_Rx_Buffer), a0
  bsr     MC68681_UartTx
  ; bra     MC68681_UartTx

  ; also, a newline
  moveq   #2, d0
  swap    d0
  lea     .Newline(pc), a0
  bra     MC68681_UartTx
  ; bsr     MC68681_UartTx

  ; done!
.Done:
  rts

.Colon:
  dc.b    ": ", 0
  even
.Newline:
  dc.b    " ", $0A, 0
  even

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Data section

Menu_Text:
  dc.b    "68komputer Loader Menu", $0A
  dc.b    "Select an option", $0A
  dc.b    "1) Start ROM app from $008000", $0A
  dc.b    "2) Start RAM app from $088000", $0A
  dc.b    "3) Download to RAM", $0A
  dc.b    "4) Enter monitor", $0A
  dc.b    "> ", 0
  even

Menu_Invalid:
  dc.b    "Invalid selection!", $0A, $0A, 0
  even

Menu_ErrRunApp:
  dc.b    "Error starting app", 0
  even

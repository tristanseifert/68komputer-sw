;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Various monitor commands to do with loading data over serial port
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; Load - Load data from host
;
;****************************************
;*                                      *
;* Load is invoked as follows:          *
;*                                      *
;*       l<cr> - load from host with no *
;*               offset                 *
;*       <ff> - same as l<cr> but used  *
;*              only exiting emulator   *
;*       l xxxxxxxx - load with offset xxxxxxxx *
;*                                      *
;****************************************
;
lmes:   dc.b    lf,cr
        dc.b    "Load...", nul
slmes:  dc.b    lf,cr
        dc.b    "User PC == ", nul
elmes:  dc.b    lf,cr
        dc.b    "Load done...", nul
        dc.b    nul

load:   bsr     getch                   ;get delimiter
        cmp.b   #$0d,d0                 ;if <cr> then no offset
        beq     lnoof
        lea     getch,a0                ;get offset
        bsr     InHex_Word
        move.l  d0,_pc                  ;save load point for go command
        bra     ld1
lnoof:  move.l  #$0,_pc
ld1:
        ; this clears the UART B receive buffer
        ; lea     lbuff,a1                ;point at lpbuff
        ; move.w  #$0,head(a1)            ;set queue for lp
        ; move.w  #$ffff,tail(a1)
        ; move.w  #$0,count(a1)
        move.b  #0, (UART_B_Queue+UART_Queue_WritePtr)

        lea     lmes,a0                 ;print starting message
        bsr     writs
        move.b  #$0d,d0                 ;load a <cr>
        bsr     writu                   ;send it to the host
        lea     lgch,a0                 ;set up for host load routine
llp:    jsr     (a0)                    ;get S
        cmp.b   #$53,d0
        bne     llp                     ;No - start over
        jsr     (a0)                    ;get 1 or 9
        cmp.b   #$39,d0                 ;9 - then done
        beq     ldone
        cmp.b   #$31,d0                 ;1 - then another record
        bne     llp
        bsr     InHex_Byte                    ;get byte count
        move.l  d0,d1
        subq.b  #$4,d1                  ;remove count for check
        bsr     InHex_Word
        add.l   _pc,d0                  ;add offset
        movea.w d0,a1                   ;save starting address
lblp:   bsr     InHex_Byte                    ;get actual data byte
        move.b  d0,(a1)+                ;move to memory
        dbf     d1,lblp                 ;loop for count
        bsr     InHex_Word                    ;gobble up check and crlf
        bra     llp                     ;try another record
ldone:  jsr     (a0)                    ;gobble up byte count
        jsr     (a0)
        bsr     InHex_Word                    ;get address from end macro
        add.l   _pc,d0                  ;add offset
        move.l  d0,d1                   ;save it
        move.l  d0,_pc                  ;set starting address for go
        move.w  #$0,_sr                 ;set status register
        move.l  #$10,d0
        lea     dr0,a1
lreg:   move.l  #$0,(a1)+
        dbf     d0,lreg
        movea.l a0,a2                   ;save the port location in a2
        lea     ustck,a0
        move.l  a0,ar7                  ;set user stack
        lea     slmes,a0                ;write message
        bsr     writs
        move.l  d1,d0
        bsr     OutHex_Word                   ;write starting address
        move.l  #$03,d1                 ;gobble up last four bytes
        movea.l a2,a0                   ;restore the port location to a0
ll2:    jsr     (a0)
        dbf     d1,ll2
        lea     elmes,a0                ;send last message
        bsr     writs
        bset    #$00,echo               ;turn terminal echo back on
        rts

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; Upload - upload program from terminal port
;
;****************************************
;*                                      *
;* Upload is invoked as follows:        *
;*                                      *
;*       u<cr> - load from terminal     *
;*               with no offset         *
;*       u xxxxxxxx - load with offset xxxxxxxx *
;*                                      *
;****************************************
;
uload:  bsr     getch                   ;same as above, except that it
        cmp.b   #$0d,d0                 ;uses the terminal port for the
        beq     ulnoof                  ;load.
        lea     getch,a0
        bsr     InHex_Long
        move.l  d0,_pc
        bra     uld1
ulnoof: move.l  #$0,_pc
uld1:
        ; this clears the UART A receive buffer
        ; lea     ibuff,a1
        ; move.w  #$0,head(a1)
        ; move.w  #$ffff,tail(a1)
        ; move.w  #$0,count(a1)
        move.b  #0, (UART_A_Queue+UART_Queue_WritePtr)

        lea     lmes,a0
        bsr     writs
        move.b  #$0d,d0
        bsr     writu
        lea     getch,a0
        bclr    #$00,echo
        bra     llp                     ;goes to the load routine above

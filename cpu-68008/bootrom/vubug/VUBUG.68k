; include our hardware defines
  include "../hardware.68k"
  include "../loader_api.68k"

;       NOTES   : PORTED TO PC BY DAVE GOODMAN
;               : PORTED TO RAYMATIC 68K BOARD BY RUSSELL G. BROWN
;       ASSEMBLE: mas68k -l vubug.68k
;               : ASSEMBLER WILL TAKE FILE vubug.68k AND
;               : WILL CREATE vubug.o, vubug.l
;       VER 3.0 : VUBUG VER 3.0 PORTEd TO PC FOR ASSEMBLE USING a68K 9/84
;       VER 3.1 : VUBUG VER 3.1 FIXED FOR VU68K BOARD 10/86
;       VER 4.0 : VUBUG VER 4.0 PORTED TO RAYMATIC 68K BOARD 4/88
;*******************************************
;*                                         *
;********         V U B U G         ********
;*                                         *
;* Copyright (C) 1983, 1988                *
;*               Vanderbilt Univ.          *
;*               Comp. Sci. dept.          *
;*               PO Box 1679               *
;*               Station B                 *
;*               Nashville, Tenn.          *
;*                          37235          *
;*                                         *
;*       author:                           *
;*              Edward M. Carter           *
;*                                         *
;*******************************************
;*                                         *
;* This software was prepared for distri-  *
;* bution by Russell G. Brown.  Please     *
;* note that it is being distributed at    *
;* the request of several readers of the   *
;* usenet newsgroup comp.sys.m68k.  It has *
;* no warranty of any sort, at all.  I     *
;* think that the code is fairly self      *
;* explanatory.  Good luck in modifying    *
;* it to work on whatever application you  *
;* may have.                               *
;*******************************************
;*                                         *
;* although the information contained here-*
;* in, as well as any information provided *
;* relative thereto, has been carefully re-*
;* viewed and is believed correct, Vander- *
;* bilt University assumes no liability    *
;* arising out of its application or use,  *
;* neither does it convey any license under*
;* its patent rights nor the rights of     *
;* others.                                 *
;*                                         *
;*******************************************
;*                                         *
;* The commands supported are as follows:  *
;*                                         *
;*         m - examine/update memory       *
;*         l - load program from host      *
;*         u - load program from terminal  *
;*         d - display blocks of memory    *
;*         t - single-step a program       *
;*         s - single-step                 *
;*         g - start a user mode program   *
;*         <cr> - short g command          *
;*         b - set/remove breakpoints      *
;*         r - examine/update registers    *
;*         p - prototype commands          *
;*         e - terminal emulator mode      *
;*         c - copy memory blocks          *
;*         x - print help messages         *
;*                                         *
;* Sub-command under each of these commands*
;* are shown in the source code for each   *
;* command.                                *
;*                                         *
;*******************************************
;
; Queue structure
;
        org     $0
head    =       $0000
tail    =       $0002
count   =       $0004
queue   =       $0006
;
; Breakpoint structure
;
        org     $0
instr   =       $0000
iloc    =       $0002
;
; The following is the exception vector
; table for the monitor. There should be
; no further "org"s to address contained
; herein as this will destroy the vector
; for iterrupts, breakpoints...
;
        org     $0                      ;Reset Vector
        dc.l    stack                   ;system stack
        dc.l    start                   ;initial pc
        dc.l    abhlr                   ;bus error
        dc.l    abhlr                   ;address error
        dc.l    bhlr                    ;illegal instruction vector
        dc.l    ghlr                    ;zero divide
        dc.l    ghlr                    ;chk
        dc.l    ghlr                    ;trapv
        dc.l    phlr                    ;privileged instruction trap
        dc.l    thlr                    ;trace handler
        dc.l    bhlr                    ;emulator trap 1010
        dc.l    bhlr                    ;emulator trap 1111
        org     $3c
        dc.l    ghlr                    ;uninitialized iterrupt
        org     $60

        dc.l    IRQ_Unused                    ;spurious iterrupt
        dc.l    IRQ_Unused                    ; irq1: unused
        dc.l    VUBUG_MC68681_ISR       ; irq2: DUART
        dc.l    IRQ_Unused                    ;user auto-vectors
        dc.l    IRQ_Unused
        dc.l    IRQ_Unused
        dc.l    IRQ_Unused
        dc.l    IRQ_Unused

        dc.l    texit                   ;exit
        dc.l    tgetb                   ;getb
        dc.l    tgetw                   ;getw
        dc.l    tgetl                   ;getl
        dc.l    twrtb                   ;wrtb
        dc.l    twrtw                   ;wrtw
        dc.l    twrtl                   ;wrtl
        dc.l    tgetc                   ;getc
        dc.l    twrts                   ;wrts
        dc.l    twrtc                   ;wrtc
        dc.l    tcrlf                   ;crlf
utrpb:  dc.l    utrapb                  ;user trap vectors
utrpc:  dc.l    utrapc
utrpd:  dc.l    utrapd
utrpe:  dc.l    utrape
utrpf:  dc.l    utrapf

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;************************************
;*                                  *
;*       Monitor data area          *
;*                                  *
;************************************
;
; RAM Base address
        org     RAM_Monitor


utrapb: dc.l    $00000000
utrapc: dc.l    $00000000
utrapd: dc.l    $00000000
utrape: dc.l    $00000000
utrapf: dc.l    $00000000

userv1: dc.l    $00000000
userv2: dc.l    $00000000
userv3: dc.l    $00000000
userv4: dc.l    $00000000
userv5: dc.l    $00000000

uav3:   dc.l    $00000000
uav4:   dc.l    $00000000
uav5:   dc.l    $00000000
uav6:   dc.l    $00000000
uav7:   dc.l    $00000000

sarea:  dcb.w   $80,$0000               ;system stack
stack   =       *
bktab:  dcb.w   $0a,$0000               ;breakpoint table

_sr:    dc.w    $0000                   ;register save area
_pc:    dc.l    $00000000

dr0:    dc.l    $00000000
dr1:    dc.l    $00000000
dr2:    dc.l    $00000000
dr3:    dc.l    $00000000
dr4:    dc.l    $00000000
dr5:    dc.l    $00000000
dr6:    dc.l    $00000000
dr7:    dc.l    $00000000
ar0:    dc.l    $00000000
ar1:    dc.l    $00000000
ar2:    dc.l    $00000000
ar3:    dc.l    $00000000
ar4:    dc.l    $00000000
ar5:    dc.l    $00000000
ar6:    dc.l    $00000000
ar7:    dc.l    $00000000

ptab:   dcb.w   $3,0000                 ;prototype table
rexam:  dc.w    $0000                   ;register examination pointer
exam:   dc.l    $0000                   ;memory examination pointer

t1:     dc.w    $0000                   ;temporary work area
t2:     dc.w    $0000
t3:     dc.w    $0000
t4:     dc.w    $0000
t5:     dc.w    $0000

ctrls:  dc.w    $0000                   ;ctrl-s,ctrl-q flag
bkptf   =       *-1                     ;breakpoint flag

; lbuff:  dcb.w   $0b,0000                ;load buffer
; ibuff:  dcb.w   $0b,0000                ;terminal buffer
users:  dcb.w   $80,0000                ;users stack area
ustck   =       *

aend:   dc.l    $0000
siz:    dc.w    $0000
writm:  dc.w    $0000
echo:   dc.w    $0000                   ;terminal port echo flag

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; queues of received characters. the oldest character will always be at address
; 0 of the queue, with newly received characters being placed at successive
; locations. A counter is provided to indicate the locaton at which data is
; currently being written.
;
; Detecting whether data is available in the queue can be done by checking the
; write pointer: if it is at the head of the queue (0) there is no data.
;
; Queues are represented as follows:
; - $00: Write pointer
; - $01: Unused, should be 0
; - $02: Data area, 16 bytes
UART_Queue_WritePtr             = $0
UART_Queue_Data                 = $2

UART_Queue_DataLen              = $10

UART_A_Queue:
  dc.b  0, 0
  dc.l  0, 0, 0, 0
  even

UART_B_Queue:
  dc.b  0, 0
  dc.l 0, 0, 0, 0
  even

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;+++++++++++++++++++++++++++++++++++++++++
;                                        +
;            Start of monitor            +
;                                        +
;+++++++++++++++++++++++++++++++++++++++++
        org     $C0

; this is the escape sequence Esc E
csc     =       $1b45           ;clear screen (h-19)
; define some other characters
cr      =       $0d
lf      =       $0a
nul     =       $00

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
howdy:
  dc.w    csc

  ; set the ASCII character set as graphics set 0
  dc.b    $1b, "(B"
  ; set the "dec special graphics" as graphics set 1
  dc.b    $1b, ")0"

  ; draw top border
  dc.b    $E, $6C
  dcb.b   $33, $71
  dc.b    $6B, $F
  dc.b    cr,lf

  ; first line
  dc.b    $E, $78, $F
  dc.b    " M68000 Monitor VUBUG Version 4.0 11 August, 1988  "
  dc.b    $E, $78, $F
  dc.b    cr,lf

  ; second line
  dc.b    $E, $78, $F
  dc.b    " Modified for 68komputer by Tristan Seifert (2019) "
  dc.b    $E, $78, $F
  dc.b    cr,lf

  ; bottom border
  dc.b    $E, $6D
  dcb.b   $33, $71
  dc.b    $6A, $F

  dc.b    cr,lf,lf,nul

; bad command entered
Msg_InvalidCommand:
  dc.b  ": Bad Command"
  dc.b    cr, lf, nul
  even

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; These are seven user interrupt vectors
; which must remain at address $0100.
; Please ensure that they do
;
vect1:  dc.l    userv1
vect2:  dc.l    userv2
vect3:  dc.l    userv3
vect4:  dc.l    userv4
vect5:  dc.l    userv5

ssri:   dc.w    $2000           ;supervisor SR
ssrn:   dc.w    $2700           ;same w/o interrupts

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; prompt to accept input at
Msg_Prompt:
  dc.b    cr,lf
  dc.b    '!'
  dc.b    nul

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; monitor entry
start:
        ; set up the UARTs
        move    #$2700, sr
        bsr     MC68681_Reset

        ; RXRDY_B, break_A, RXRDY_A; then install our IRQ handler
        move.b  #%00100110, (MC68681_Base+MC68681_W_IMR)

        move.l  #VUBUG_MC68681_ISR, (Loader_IRQ2)

        ; restore interrupts
        move    #$2000, sr
; memory test
;         move.w  #$ffff,d0               ;load $ffff for first memory test
;         movea.w #$4000,a0               ;start at $4000
;         move.w  #$1fff,d2               ;$2000 words of ram
; mt1:    move.w  d0,(a0)                 ;store value
;         move.w  (a0)+,d1                ;load it back
;         cmp.w   d0,d1
;         bne     memerr                  ;if not the same, memory error.
;         dbf     d2,mt1
;         move.w  #$0000,d0               ;load $0000 for second mem test
;         movea.w #$4000,a0
;         move.w  #$1fff,d2
; mt2:    move.w  d0,(a0)
;         move.w  (a0)+,d1
;         bne     memerr                  ;if not zero, memory error.
;         dbf     d2,mt2
;         bra     gwan

; get here if memory test failed
; memerr: lea     memnot,a0               ;RAM doesn't work right.
;         bsr     writs
;         bra     gwan
;
; memnot: dc.b    "RAM ERROR!!!!"
;         dc.b    cr,lf,nul

; set up buffers
gwan:
  ; clear both of our receive buffers
  moveq   #0, d0
  move.b  d0, (UART_Queue_WritePtr+UART_A_Queue)
  move.b  d0, (UART_Queue_WritePtr+UART_B_Queue)

  lea     UART_Queue_Data+UART_A_Queue, a0
  lea     UART_Queue_Data+UART_B_Queue, a1
  move    #3, d1

.Clear:
  move.l  d0, (a0)+
  move.l  d0, (a1)+
  dbf     d1, .Clear

  ; clear control variables
  move.l  d0, (exam)
  move.b  d0, (ctrls)
  move.b  d0, (bkptf)

  ; clear the breakpoint table
  moveq   #$4, d1
  lea     bktab, a1

.clearBkpt:
  move.l  d0, (a1)+
  dbf     d1, .clearBkpt

  ; clear register save area
        move.w  #0,_sr                  ;clear register save area
        move.l  #$10,d0
        lea     _pc,a0
slp1:   move.l  #0,(a0)+
        dbf     d0,slp1

  ; set up user stack pointer
        lea     ustck,a0                ;set user stack pointer
        move.l  a0,ar7

  ; clear system stack
        lea     sarea,a0                ;clear system stack
        moveq   #$3f,d0
slp2:   move.l  #0,(a0)+
        dbf     d0,slp2

done:
  ; setup is done. enable IRQs, and output the header/version
  move.w  ssri, sr
  lea     howdy, a0
  bsr     writs

  ; enable receiving characters here (TODO)

  ; turn on terminal echo and enter command loop
  bset    #0, echo
  bra     comm

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; Generalized write facility writes 1 byte
; passed in d0 to tty. (UART A)
;
writ:
  btst    #0, ctrls               ; Is ctrl-s active
  beq     .doWrite                ; no, so write character

  stop    #$2000                  ; yes; wait until next int
  bra     writ                    ; when awakened check again

.doWrite:
  ; write character to DUART
  move.b  d0,(MC68681_Base+MC68681_W_THRA)

  ; then, wait for tx to complete
.wait:
  ; read the status register, check TXRDY bit (2), loop while clear
  move.b  (MC68681_Base+MC68681_R_SRA), d0
  btst    #2, d0
  beq     .wait
  rts

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; Generalized write facility writes 1 byte
; passed in d0 to serial port (UART B)
;
writu:
  ; write character to DUART
  move.b  d0,(MC68681_Base+MC68681_W_THRB)

  ; then, wait for tx to complete
.wait:
  move.b  (MC68681_Base+MC68681_R_SRB), d0
  btst    #2, d0
  beq     .wait
  rts

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; Generalized routine to write a string which
; must terminate in a null (goes to UART A/tty)
;
writs:
  ; get character of string, exit if null
  move.b  (a0)+, d0                ;a0 is address of string
  beq     .end

  ; write the char and check the next one
  bsr     writ
  bra     writs

.end:
  rts

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;Generalized routine to write
;a word, byte or long word. (goes to UART A/tty)
;
OutHex_Byte:
; writb:
  move.w  #$1, t1                  ;t1 is the number of bytes
  bra     OutHex

OutHex_Word:
; writw:
  move.w  #$3, t1
  bra     OutHex

OutHex_Address:
  ; move.w  #$5, t1
  ; bra     OutHex

OutHex_Long:
; writl:
  move.w  #$7, t1
  ; fall through to wr


OutHex:
  movem.l d1-d2/a0/a6, -(sp)

  ; get the count set above, null terminate the string and set it as a stack
  move.w  (t1), d2

  lea     t5+1, a6
  move.b  #0, (a6)

.convertNybble:
  ; convert each hex digit to an ASCII byte
  move.b  d0, d1
  and.b   #$0f, d1

  ; is it A-F?
  cmp.b   #$0a, d1
  blt     .isNumber

  ; yeah, format it as such
  add.b   #$37, d1
  bra     .writeChar

  ; handle it being a number
.isNumber:
  add.b   #$30, d1

  ; push that ASCII character onto our "string stack"
.writeChar:
  move.b  d1, -(a6)
  lsr.l   #4, d0

  ; continue til we're out of nybbles
  dbf     d2, .convertNybble

  ; then, write that string to the terminal
  movea.l a6, a0
  bsr     writs

  ; restore regs
  movem.l (sp)+, d1-d2/a0/a6
  rts

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; include any of our hardware glue
        include "hw_glue.68k"

        dc.b    "Kushblunt, tasty!"
        even

; unused IRQ
IRQ_Unused:
  rte

; IRQ handler that forwards to RAM
IRQ_Lvl2:
  move.l  a0, -(sp)
  lea     (Loader_IRQ2), a0
  jsr     (a0)
  move.l  (sp)+, a0
  rte


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; Rstrt - restart from control c
;
VUBUG_Restart:
    ; restore all the registers we backed up earlier
    movem.l (sp)+, d0-d1/a0 ; from VUBUG_MC68681_ISR

    ; build a "fake" exception return frame
    movem.l #$ffff,dr0              ;save registers d0-a7
    move.l  usp,a0                  ;save user stack pointer
    move.l  a0,ar7
    move.w  (a7)+,_sr               ;save status register from stack
    move.l  (a7)+,_pc               ;save program counter from stack
    pea     comm                    ;fake a return to command loop
    move.w  ssri,-(a7)              ;fake a new status register
    rte

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; CRLF - write a carriage return and
; line feed. (to TTY/UART A)
;
crlf:
  lea     .NewlineData, a0
  bsr     writs
  rts

.NewlineData:
  dc.b    cr, lf, nul
  even

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; Generalized number fetcher (place in a0 the routine to use for reading)
;
InHex_Byte:
; getb:
  move.w  #1, t1
  bra     InHex

InHex_Word:
; getw:
  move.w  #3, t1
  bra     InHex

InHex_Long:
getl:
  move.w  #7, t1


InHex:
  ; save registers, and restore our counter
  movem.l d1-d2, -(a7)
  move.w  t1, d2
  moveq   #0, d1

blp:
  ; call the input routine
  jsr     (a0)

  ; is it A-F?
  cmp.b   #$3a, d0
  blt     n1
  add.b   #$09, d0

n1:
  and.b   #$0f, d0
  asl.l   #$4, d1                  ;place in next hex didgit
  or.b    d0, d1
  dbf     d2, blp
  move.l  d1, d0                   ;setup return in d0

  ; restore registers
  movem.l (a7)+, d1-d2
  rts



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; command interpreter. each entry is 6 bytes
;
CommandTable:
  dc.w    $4d00           ;m - memory update
  dc.l    Cmd_MemUpdate
  dc.w    $4c00           ;l - load from host (S-format)
  dc.l    Cmd_Load
  dc.w    $5500           ;u - upload program from terminal port
  dc.l    Cmd_Upload
  dc.w    $4400           ;d - dump contents of memory
  dc.l    Cmd_MemDump
  dc.w    $5300           ;s - single step
  dc.l    Cmd_SingleStep
  dc.w    $5400           ;t - trace a program's path
  dc.l    Cmd_Trace
  dc.w    $4700           ;g - start user program
  dc.l    Cmd_Go
  dc.w    $0d00           ;<cr> - short g command
  dc.l    Cmd_Go_NoAddr
  dc.w    $4200           ;b - set/remove breakpoints
  dc.l    bkpt
  dc.w    $4300           ;c - copy memory blocks
  dc.l    Cmd_MemCopy
  dc.w    $5200           ;r - display/modify registers
  dc.l    regs
  dc.w    $5000           ;p - prototype commands
  dc.l    proto
  dc.w    $4800           ;h - display help messages
  dc.l    Cmd_Help
  dc.w    $4100           ;a - assembly listing
  dc.l    Cmd_Disassemble
CommandTable_End:

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; Structure of each entry is command
; (com) and address of servicing routine
; (code)
;
com     =       $0
code    =       $2

comm:
  ; display command prompt
  lea     Msg_Prompt, a0
  bsr     writs

  ; read a character in, uppercase it, and begin searching the command table
  bsr     getch
  and.b   #$5f, d0

  lea     CommandTable-6, a2
  ; moveq   #$0e, d2
  moveq   #((CommandTable_End-CommandTable)/6)-1, d2

clp:
  ; advance to the next slot
  addq.w  #6, a2

  ; does the character match?
  cmp.b   com(a2), d0
  ; if not, check the next slot
  dbeq    d2, clp
  ; if it didn't match, we're at the end and couldn't find a command
  bne     .BadCommand

  ; get the address of the routine and jump to it
  movea.l code(a2), a2
  jsr     (a2)
  bra     comm


.BadCommand:
  ; print a "bad command" message
  lea     Msg_InvalidCommand, a0
  bsr     writs
  bra     comm

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; memory related commands
  include "cmd_mem.68k"

; load commands
  include "cmd_load.68k"
; various debug commands
  include "cmd_debug.68k"
; include interrupt handlers
  include "irq_handlers.68k"
; help and assembly listing
  include "cmd_help.68k"
  include "cmd_listing.68k"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; hardware routines
  include "../68681.68k"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; stub tick handler
Loader_Handle_Tick:
  rts

Illegal:
  illegal

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Test user program
  org $8000

TestProg:
  lea     .Message, a0
  trap    #8

  bra.s   TestProg

.Message:
  dc.b  "It is "
  dc.b  $1b, "[1m", $1b, "[7m", $1b, "[1m"
  dc.b  "kush smoking"
  dc.b  $1b, "[0m"
  dc.b  " time!"
  dc.b  cr, lf, nul
  even

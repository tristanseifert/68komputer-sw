;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; various equates for 68komputer hardware
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; ROM base (bootloader address)
ROM_Base                    = $E00000
; Application ROM starting location
ROM_App_Base                = $E10000

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; 68681 base
MC68681_Base                = $FF0000

; WRITE: channel A mode register
MC68681_W_MRnA              = $0
; WRITE: channel A clock select
MC68681_W_CSRA              = $1
; READ: channel A status register
MC68681_R_SRA               = $1
; WRITE: channel A command register
MC68681_W_CRA               = $2
; READ: masked IRQ status
MC68681_R_MISR              = $2
; WRITE: channel A TX holding register
MC68681_W_THRA              = $3
; READ: channel A RX holding register
MC68681_R_RHRA              = $3

; WRITE: AUX control register
MC68681_W_ACR               = $4
; READ: Input port change register
MC68681_R_ACR               = $4

; WRITE: IRQ mask register
MC68681_W_IMR               = $5
; READ: IRQ status register
MC68681_R_ISR               = $5

; WRITE: Counter/Timer upper byte
MC68681_W_CTU               = $6
; READ: Counter/Timer upper byte
MC68681_R_CTU               = MC68681_W_CTU

; WRITE: Counter/Timer lower byte
MC68681_W_CTL               = $7
; READ: Counter/Timer lower byte
MC68681_R_CTL               = MC68681_W_CTL

; WRITE: channel B mode register
MC68681_W_MRnB              = $8
; WRITE: channel B clock select
MC68681_W_CSRB              = $9
; READ: channel B status register
MC68681_R_SRB               = $9
; WRITE: channel B command register
MC68681_W_CRB               = $A
; WRITE: channel B TX holding register
MC68681_W_THRB              = $B
; READ: channel B RX holding register
MC68681_R_RHRB              = $B

; WRITE: IRQ vector register
MC68681_W_IVR               = $C
; READ: IRQ vector register
MC68681_R_IVR               = MC68681_W_IVR


; WRITE: output port configuration
MC68681_W_OPCR              = $D
; READ: input port
MC68681_R_IP                = $D

; WRITE: set output port register bits
MC68681_W_SOPBC             = $E
; READ: Start counter/timer
MC68681_R_SCC               = $E

; WRITE: clear output port register bits
MC68681_W_COPBC             = $F
; READ: stop counter/timer
MC68681_R_STC               = $F

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; RTC base
RTC_Base                    = $FF8000
RTC_Time_Reg                = RTC_Base+$7FF8

RTC_DS1744_Year             = $7FFF
RTC_DS1744_Month            = $7FFE
RTC_DS1744_Date             = $7FFD
RTC_DS1744_Day              = $7FFC
RTC_DS1744_Hours            = $7FFB
RTC_DS1744_Minutes          = $7FFA
RTC_DS1744_Seconds          = $7FF9
RTC_DS1744_Century          = $7FF8

RTC_DS1744_Command          = RTC_DS1744_Century

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; loader configuration
NVRAM_Loader_Base           = (RTC_Base+$4)
NVRAM_Loader_Mode           = (NVRAM_Loader_Base)
NVRAM_Loader_AppAddr        = (NVRAM_Loader_Mode+$2)
; start of application defined NVRAM space
NVRAM_App_Base              = (NVRAM_Loader_Base+$100)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; RAM base and size
RAM_Base                    = $000000
RAM_Size                    = $100000

; base address for monitor (2KBytes reserved)
RAM_Monitor                 = (RAM_Base)
; base address for loader (4KBytes reserved)
RAM_Loader                  = (RAM_Monitor+$800)
; base address for app variables
RAM_Base_App                = (RAM_Loader+$1000)

; reserve a 64K area for decompressed ROM apps
; this is only used by the loader, but this is the address that any binary is
; decompressed to.
RAM_LZ4_App_Base            = (RAM_Base + RAM_Size - $10000)

; the last $200 bytes of RAM ($80000 - $FFFFF) are reserved as stack
RAM_Stack_Base              = RAM_Base + RAM_Size
